import { get } from 'svelte/store';
import { urls } from '../stores/urlStore';
import { videos } from '../stores/videoStore';
import { users } from '../stores/userStore';
import * as api from 'api.js';

export function post(endpoint, data = {}) {
	return fetch(endpoint, {
		method: 'POST',
		credentials: 'include',
		body: JSON.stringify(data),
		headers: {
			'Content-Type': 'application/json',
		}
	}).then(r => r.json());
}
export function del(endpoint, id) {
	return fetch(endpoint, {
		method: 'DELETE',
		credentials: 'include',
		body: id,
		headers: {
			'Content-Type': 'application/json',
		}
	}).then(r => r.json());
}
export function put(endpoint, data={}) {
	return fetch(endpoint, {
		method: 'PUT',
		credentials: 'include',
		body: JSON.stringify(data),
		headers: {
			'Content-Type': 'application/json',
		}
	}).then(r => r.json());
}

export async function getVideo(id, user, { ...options }) {
	if (user && user.token) {
		let defaults = {
			width: 300,
			height: 300,
			square: 2
		}
		const params = { ...defaults, ...options }
		let cached, url, res, stringified;
		stringified = JSON.stringify(params).replace(/[\"\'\s]/g, '');

		cached = get(urls).has(id) && get(urls).get(id)[ stringified ] || false;

		if (!(url = cached)) {
			res = await uri(id, user, 'v', params);
			if (res) (url = res[ id ]) && urls.add(res);
		}
		return `${ url }/?token=${ user.token }`;
	}
}

export async function getImage(id, user, { ...options }) {
	if (user && user.token) {
		let defaults = {
			width: 300,
			height: 300,
			square: 0
		}
		const params = { ...defaults, ...options }
		let cached, url, res, stringified;
		stringified = JSON.stringify(params).replace(/[\"\'\s]/g, '');

		cached = get(urls).has(id) && get(urls).get(id)[ stringified ] || false;

		if (!(url = cached)) {
			res = await uri(id, user, 'i', params)
			if (res) (url = res[ 'url' ]) && urls.add(res);
		}
		return `${ url }/?token=${ user.token }`;
	}
}

export async function getMedia(type, id, user, { ...options }) {
	const TYPE = type === 'IMAGE' ? 'i' : type === 'VIDEO' ? 'v' : 'i';
	
	if (user && user.token) {
		let defaults = {
			width: 300,
			height: 300,
			square: 0
		}
		const params = { ...defaults, ...options }
		let cached, url, res, stringified;
		stringified = JSON.stringify(params).replace(/[\"\'\s]/g, '');

		cached = get(urls).has(id) && get(urls).get(id)[ stringified ] || false;

		if (!(url = cached)) {
			res = await uri(id, user, TYPE, params)
			if (res) (url = res[ 'url' ]) && urls.add(res);
		}
		return `${ url }/?token=${ user.token }`;
	}
}
export function equals(obj_1, obj_2) {
	let json_1 = (typeof obj_1 === 'object') && JSON.stringify(obj_1);
	let json_2 = (typeof obj_2 === 'object') && JSON.stringify(obj_2);
	if (!!json_1 && !!json_2) {
		return json_1 === json_2;
	}
	return false;

}
export function getExt(fn) {
	let match = fn && fn.match(/[A-Za-z0-9]+$/) || [];
	return match.length && match[0].toLowerCase();
}
export function getUserVideos(idx) {
    let userVideos = [];
    let _videos = get(videos);
    let _users = get(users);
    if (_users[idx] && (userVideos = _users[idx].videos) && userVideos.length) {
      userVideos = _videos.filter((v) => userVideos.find( uv => uv.id === v.id));
	}
    return userVideos;
}
export function toLocalDate(date, options={}) {
	// if (isNaN(Date.parse(date))) return false;

	let defaults = {
		year: 'numeric',
		month: 'short', // 2-digit
		day: '2-digit',
		hour: 'numeric',
		minute: 'numeric',
	}
	
	options = { ...defaults, ...options };
	return new Date(date).toLocaleDateString('de-DE', options)
}
async function uri(id, user, type, {width, height, square}) {
	var query = `?width=${width}&height=${height}&square=${square}`;

	const result = await api.get(`u/${type}/${id}/${query}`, user && user.token);
	if (result && result.success) {
		return result.data;
	}
	return false;
}
export const key = {};
